package de.ebertp.HomeDroid.Utils;

import java.util.Locale;

public class TranslateUtil {

    public static String locale;

    public static String getNotificationTypeText(String s) {

        if (locale == null) {
            locale = Locale.getDefault().getLanguage();
        }

        if (locale.equals("de")) {
            s = s.replace("LOWBAT", "Batterie leer");
            s = s.replace("FAULT_REPORTING", "Batterie leer");
            s = s.replace("ERROR", "Fehler");
            s = s.replace("STICKY_UNREACH", "Gerätekommunikation war gestört");
            s = s.replace("UNREACH", "Gerätekommunikation gestört");
            s = s.replace("CONFIG_PENDING", "Konfigurationsdaten stehen zur Übertragung an");
        } else {
            s = s.replace("LOWBAT", "Battery empty");
            s = s.replace("FAULT_REPORTING", "Battery empty");
            s = s.replace("ERROR", "Error");
            s = s.replace("STICKY_UNREACH", "Device was unreachable");
            s = s.replace("UNREACH", "Device unreachable");
            s = s.replace("CONFIG_PENDING", "Pending configuration");
        }
        return s;
    }

    public static String getTranslatedStringTable(String s) {
        if (s.startsWith("${")) {

            if (locale == null) {
                locale = Locale.getDefault().getLanguage();
            }

            s = s.trim();

            if (s.length() > 1) {

                s = s.replace("${", "");
                s = s.replace("}", "");

                // if (locale.equals("de")) {

                s = s.replace("stringTableAccuLevel", "Ladezustand");
                s = s.replace("stringTableAccuCharging", "Lädt");
                s = s.replace("stringTableAccuDischarge", "Versorgung durch Akku");
                s = s.replace("stringTableAccuTrickleCharg", "Versorgung durch Akku");
                s = s.replace("stringTableAccuStateUnkown", "Zustand unbekannt");
                s = s.replace("stringTableAlarmActuatorTitle", "Funk-Sirenen-Blitz-Ansteuerung");
                s = s.replace("stringTableAlarmActuatorCyclicInfoMsg", "zyklische Statusmeldung");
                s = s.replace("stringTableAlarmActuatorOnTime", "Einschaltdauer");
                s = s.replace("stringTableAlarmActuatorSabotageMsg", "Sabotagemeldung");
                s = s.replace("stringTableAlarmActuatorStateFalse", "Schaltzustand: Aus");
                s = s.replace("stringTableAlarmActuatorStateTrue", "Schaltzustand: Ein");
                s = s.replace("stringTableAllLEDs", "Alle Kanäle einstellen");
                s = s.replace("stringTableAnalog", "Analog");
                s = s.replace("stringTableBackLightAtCharge", "Beleuchtung bei Betrieb in Ladeschale");
                s = s.replace("stringTableBackLightAtKeystroke", "Beleuchtung bei Tastenbetätigung");
                s = s.replace("stringTableBackLightAtMotion", "Beleuchtung bei Bewegung/Erschütterung");
                s = s.replace("stringTableBackLightOnTime", "Beleuchtungsdauer");
                s = s.replace("stringTableBatDefectLimit", "Batterie-Defekt-Schwelle");
                s = s.replace("stringTableBlindTitle", "Rollladenaktor");
                s = s.replace("stringTableBlindChangeOverDelay", "Motorrichtungsumschaltzeit");
                s = s.replace("stringTableBlindLevel", "Behanghöhe");
                s = s.replace("stringTableBlindRunnintTimeBottomTop", "Fahrzeit von unten nach oben");
                s = s.replace("stringTableBlindRunningTimeTopBottom", "Fahrzeit von oben nach unten");
                s = s.replace("stringTableBlindRefRunCounter", "Anzahl der Fahrten bis zur automatischen Kalibrierfahrt");
                s = s.replace("stringTableBlindStop", "Anhalten");
                s = s.replace("stringTableBurstRX", "Wake-On-Radio");
                s = s.replace("stringTableButtonLock", "Tastensperre");
                s = s.replace("stringTableCapacitiveFillingSensorTitle", "Kapazitiver Füllstandsmesser");
                s = s.replace("stringTableCapacitiveFillingSensorCaseDesign", "Behälterform");
                s = s.replace("stringTableCapacitiveFillingSensorCaseDesignHor", "liegender Zylinder");
                s = s.replace("stringTableCapacitiveFillingSensorCaseDesignVer", "stehender Zylinder");
                s = s.replace("stringTableCapacitiveFillingSensorCaseDesginRect", "Quader");
                s = s.replace("stringTableCapacitiveFillingSensorCaseHeight", "Behälterhöhe");
                s = s.replace("stringTableCapacitiveFillingSensorCaseWidth", "Behälterweite");
                s = s.replace("stringTableCapacitiveFillingSensorCaseLength", "Behälterlänge");
                s = s.replace("stringTableCapacitiveFillingSensorTextFillingLevel", "Füllmenge");
                s = s.replace("stringTableCapacitiveFillingSensorTextCalcFillingLevel", "Füllmenge wird berechnet.");
                s = s.replace("stringTableCapacitiveFillingSensorFillingLevel100perc", "Füllhöhe bei 100 %");
                s = s.replace("stringTableCapacitiveFillingSensorFillingLevelUpperThres",
                        "obere Schaltschwelle in % für zusätzliche Benachrichtigung");
                s = s.replace("stringTableCapacitiveFillingSensorFillingLevelLowerThres",
                        "untere Schaltschwelle in % für zusätzliche Benachrichtigung");
                s = s.replace("stringTableCapacitiveFillingSensorFillingLevel", "Aktueller Füllstand");
                s = s.replace("stringTableCapacitiveFillingSensorLEDOnTime", "LED-Leuchtzeit (gn/rt)");
                s = s.replace("stringTableCapacitiveFillingSensorMeaLength", "Länge der Messleitung");
                s = s.replace("stringTableCapacitiveFillingSensorCustomCal", "Benutzerdefinierte Kalibrierung");
                s = s.replace("stringTableCapacitiveFillingSensorWaterLowerThres",
                        "untere Schaltschwelle in % für zusätzliche Benachrichtigung");
                s = s.replace("stringTableCapacitiveFillingSensorWaterUpperThres",
                        "obere Schaltschwelle in % für zusätzliche Benachrichtigung");
                s = s.replace("stringTableCentralKeyDblPressTime", "Doppelklick-Zeit (Tastensperre)");
                s = s.replace("stringTableCentralKeyLongPressTime", "Mindestdauer für langen Tastendruck");
                s = s.replace("stringTableCharasteristicLinear", "linear");
                s = s.replace("stringTableCharasteristicSquare", "quadratisch");
                s = s.replace("stringTableClimateControlRegTitle", "Heizkörperthermostat");
                s = s.replace("stringTableClimateControlRegAdjCommand", "Stellbefehl");
                s = s.replace("stringTableClimateControlRegAdjData", "Stelldaten");
                s = s.replace("stringTableClimateControlRegDecalcDay", "Entkalkungstag");
                s = s.replace("stringTableClimateControlRegDecalcHour", "Entkalkungsstunde");
                s = s.replace("stringTableClimateControlRegDecalcMin", "Entkalkungsminute");
                s = s.replace("stringTableClimateControlRegDisplayTempHum", "Anzeige-Modus");
                s = s.replace("stringTableClimateControlRegDisplayTempHumTH", "Temperatur und Feuchtigkeit");
                s = s.replace("stringTableClimateControlRegDisplayTempHumT", "Temperatur");
                s = s.replace("stringTableClimateControlRegDisplayTempInfo", "Anzeige im Display");
                s = s.replace("stringTableClimateControlRegDisplayTempInfoActualTemp", "Aktuelle Temperatur");
                s = s.replace("stringTableClimateControlRegDisplayTempInfoSetPoint", "Solltemperatur");
                s = s.replace("stringTableClimateControlRegTempUnit", "Temperatureinheit");
                s = s.replace("stringTableClimateControlRegTempUnitC", "Grad Celsius");
                s = s.replace("stringTableClimateControlRegTempUnitF", "Grad Fahrenheit");
                s = s.replace("stringTableClimateControlRegRegulator", "Temperaturreglermodus");
                s = s.replace("stringTableClimateControlRegRegulatorAuto", "automatisch");
                s = s.replace("stringTableClimateControlRegRegulatorCentral", "zentral");
                s = s.replace("stringTableClimateControlRegRegulatorManu", "manuell");
                s = s.replace("stringTableClimateControlRegRegulatorParty", "Party");
                s = s.replace("stringTableClimateControlRegValve", "Heizungsventilmodus");
                s = s.replace("stringTableClimateControlRegValveAuto", "automatisch");
                s = s.replace("stringTableClimateControlRegValveClose", "geschlossen");
                s = s.replace("stringTableClimateControlRegValveOpen", "offen");
                s = s.replace("stringTableClimateControlRegPartyEndTime", "Party/Urlaub-Endzeit");
                s = s.replace("stringTableClimateControlRegSetpoint", "Sollwert");
                s = s.replace("stringTableClimateControlRegSetpointVentClosed", "Ventil schließen");
                s = s.replace("stringTableClimateControlRegSetpointVentOpen", "Ventil öffnen");
                s = s.replace("stringTableClimateControlRegStateFalse", "Ventil schließen");
                s = s.replace("stringTableClimateControlRegStateTrue", "Ventil öffnen");
                s = s.replace("stringTableClimateControlRegComfortValue", "Komforttemperatur");
                s = s.replace("stringTableClimateControlRegLoweringValue", "Absenktemperatur");
                s = s.replace("stringTableClimateControlRegPartyValue", "Party/Urlaub-Temperatur");
                s = s.replace("stringTableClimateControlRegSetPoint", "Solltemperatur");
                s = s.replace("stringTableClimateControlRegWindowOpenValue", "Fenster-Auf-Temperatur");
                s = s.replace("stringTableClimateControlVentDriveTitle", "Funk-Heizkörperthermostat");
                s = s.replace("stringTableClimateControlVentDriveErrorAdjRangeToSmall", "Stellbereich zu klein");
                s = s.replace("stringTableClimateControlVentDriveErrorLowBat", "Störungsposition angefahren, Batterien nahezu entladen");
                s = s.replace("stringTableClimateControlVentDriveErrorValveDriveBlocked", "Ventilantrieb schwergängig oder blockiert");
                s = s.replace("stringTableClimateControlVentDriveErrorValveDriveLoose",
                        "Ventilantrieb nicht montiert oder Stellbereich zu gross");
                s = s.replace("stringTableClimateControlVentDriveValveErrorPos", "Ventilantrieb Störungsposition");
                s = s.replace("stringTableClimateControlVentDriveValveOffsetVal", "Ventilantrieb Offsetstellung");
                s = s.replace("stringTableClimateControlVentDriveValveState", "Ventilantrieb Status");
                s = s.replace("stringTableCompatibilityMode", "Kompatibilitätsmodus");
                s = s.replace("stringTableConfButtonTime",
                        "Für die eingestellte Zeit nach Spannungszufuhr dient der lange Gerätetastendruck zur Konfiguration, danach zur Bedienung.");
                s = s.replace("stringTableConfButtonTimePermanent", "dauerhaft");
                s = s.replace("stringTableCyclicInfoMsg", "Zyklische Statusmeldung");
                s = s.replace("stringTableCyclicInfoMsgDis", "Anzahl der auszulassenden Meldungen");
                s = s.replace("stringTableCyclicInfoMsgPause", "Intervall für zyklische Statusmeldung");
                s = s.replace("stringTableDDCState", "Öffnen");
                s = s.replace("stringTableDeviceLEDMode", "Geräte-LED");
                s = s.replace("stringTableDeviceLEDModeOff", "aus");
                s = s.replace("stringTableDeviceLEDModeOn", "ein");
                s = s.replace("stringTableDigitalAnalogInputBehaviour", "Eingangssignal");
                s = s.replace("stringTableDigitalAnalogInputStateFalse", "Schaltzustand: aus");
                s = s.replace("stringTableDigitalAnalogInputStateTrue", "Schaltzustand: ein");
                s = s.replace("stringTableDigitalAnalogInputValue", "Eingangswert");
                s = s.replace("stringTableDigitalAnalogInputCalibration", "Kalibrierung");
                s = s.replace("stringTableDigitalAnalogOutputBehaviour", "Ausgangssignal");
                s = s.replace("stringTableDigitalAnalogOutputFrequency", "Ausgangsfrequenz");
                s = s.replace("stringTableDigitalAnalogOutputStateFalse", "Schaltzustand: aus");
                s = s.replace("stringTableDigitalAnalogOutputStateTrue", "Schaltzustand: ein");
                s = s.replace("stringTableDigitalAnalogOutputPulseTime", "Pulszeit");
                s = s.replace("stringTableDigitalInput", "Digital");
                s = s.replace("stringTableDigitalInputBehaviour", "Eingangssignal");
                s = s.replace("stringTableDigitalInputFrequency", "Eingangsfrequenz");
                s = s.replace("stringTableDigitalInputStateFalse", "Schaltzustand: aus");
                s = s.replace("stringTableDigitalInputStateTrue", "Schaltzustand: ein");
                s = s.replace("stringTableDigitalOutput", "Digital");
                s = s.replace("stringTableDigitalOutputStateFalse", "Schaltzustand: aus");
                s = s.replace("stringTableDigitalOutputStateTrue", "Schaltzustand: ein");
                s = s.replace("stringTableDimmerTitle", "Dimmaktor");
                s = s.replace("stringTableDimmerCharacteristic", "Ausgangskennlinie");
                s = s.replace("stringTableDimmerErrorLoad", "Lastfehler");
                s = s.replace("stringTableDimmerFuseDelay", "Trägheit Überstromerkennung");
                s = s.replace("stringTableDimmerLevel", "Dimmwert");
                s = s.replace("stringTableDimmerLoadErrorCal", "Lastausfallkalibrierung");
                s = s.replace("stringTableDimmerLoadAppearBehaviour", "Aktion bei Last-Wiederkehr");
                s = s.replace("stringTableDimmerLogicCombination", "Verknüpfungsregel");
                s = s.replace("stringTableDimmerOldLevel", "Letzter Dimmwert");
                s = s.replace("stringTableDimmerOnTime", "Einschaltdauer");
                s = s.replace("stringTableDimmerOverTempLevel", "Abschaltschwelle Übertemperatur");
                s = s.replace("stringTableDimmerPowerUpAction", "Aktion bei Spannungszufuhr");
                s = s.replace("stringTableDimmerRampTime", "Dimmzeit");
                s = s.replace("stringTableDimmerRampStop", "Stop Dimmrampe");
                s = s.replace("stringTableDimmerReduceLevel", "Reduzierpegel Übertemperatur");
                s = s.replace("stringTableDimmerReduceTempLevel", "Reduzierschwelle Übertemperatur");
                s = s.replace("stringTableDimmerStatusInfoMinDelay", "Statusmeldungen Mindestverzögerung");
                s = s.replace("stringTableDimmerErrorOverload", "Überlastung");
                s = s.replace("stringTableDimmerErrorOverheat", "Überhitzung");
                s = s.replace("stringTableDimmerStatusInfoRandom", "Statusmeldungen Zufallsanteil");
                s = s.replace("stringTableDimmerErrorReduced", "Temperatur kritisch (Lastabsenkung)");
                s = s.replace("stringTableDisplayAlarmCount", "Anzahl Alarmmeldungen");
                s = s.replace("stringTableDisplayArrowDown", "Pfeilsymbol runter");
                s = s.replace("stringTableDisplayArrowUp", "Pfeilsymbol rauf");
                s = s.replace("stringTableDisplayBacklightMode", "Displayhinterleuchtungsmodus");
                s = s.replace("stringTableDisplayBacklightModeAuto", "automatisch");
                s = s.replace("stringTableDisplayBacklightModeOff", "aus");
                s = s.replace("stringTableDisplayBacklightModeOn", "ein");
                s = s.replace("stringTableDisplayBacklight", "Beleuchtung ein");
                s = s.replace("stringTableDisplayBacklightTime", "Displayhinterleuchtungszeit");
                s = s.replace("stringTableDisplayBacklightBlinkFast", "Beleuchtung schnell blinkend");
                s = s.replace("stringTableDisplayBacklightBlinkSlow", "Beleuchtung langsam blinkend");
                s = s.replace("stringTableDisplayBacklightOff", "Beleuchtung aus");
                s = s.replace("stringTableDisplayBacklightOn", "Beleuchtung ein");
                s = s.replace("stringTableDisplayBacklightAtAlarm", "Beleuchtung bei Alarmnachricht");
                s = s.replace("stringTableDisplayBacklightAtAlarmBlinkFast", "Schnell blinkend");
                s = s.replace("stringTableDisplayBacklightAtAlarmBlinkSlow", "Langsam blinkend");
                s = s.replace("stringTableDisplayBacklightAtAlarmOff", "Aus");
                s = s.replace("stringTableDisplayBacklightAtAlarmOn", "Ein");
                s = s.replace("stringTableDisplayBacklightAtService", "Beleuchtung bei Servicenachricht");
                s = s.replace("stringTableDisplayBacklightAtServiceBlinkFast", "Schnell blinkend");
                s = s.replace("stringTableDisplayBacklightAtServiceBlinkSlow", "Langsam blinkend");
                s = s.replace("stringTableDisplayBacklightAtServiceOff", "Aus");
                s = s.replace("stringTableDisplayBacklightAtServiceOn", "Ein");
                s = s.replace("stringTableDisplayBacklightAtState", "Beleuchtung bei Statusnachricht");
                s = s.replace("stringTableDisplayBacklightAtStateBlinkFast", "Schnell blinkend");
                s = s.replace("stringTableDisplayBacklightAtStateBlinkSlow", "Langsam blinkend");
                s = s.replace("stringTableDisplayBacklightAtStateOff", "Aus");
                s = s.replace("stringTableDisplayBacklightAtStateOn", "Ein");
                s = s.replace("stringTableDisplayBeepNone", "Kein Ton");
                s = s.replace("stringTableDisplayBeepTone1", "Ton 1");
                s = s.replace("stringTableDisplayBeepTone2", "Ton 2");
                s = s.replace("stringTableDisplayBeepTone3", "Ton 3");
                s = s.replace("stringTableDisplayBeepAtAlarm", "Alarmton");
                s = s.replace("stringTableDisplayBeepAtAlarmNone", "Aus");
                s = s.replace("stringTableDisplayBeepAtAlarmTone1", "Ton 1");
                s = s.replace("stringTableDisplayBeepAtAlarmTone2", "Ton 2");
                s = s.replace("stringTableDisplayBeepAtAlarmTone3", "Ton 3");
                s = s.replace("stringTableDisplayBeepAtService", "Serviceton");
                s = s.replace("stringTableDisplayBeepAtServiceNone", "Aus");
                s = s.replace("stringTableDisplayBeepAtServiceTone1", "Ton 1");
                s = s.replace("stringTableDisplayBeepAtServiceTone2", "Ton 2");
                s = s.replace("stringTableDisplayBeepAtServiceTone3", "Ton 3");
                s = s.replace("stringTableDisplayBeepAtStatusInfo", "Statuston");
                s = s.replace("stringTableDisplayBeepAtStatusInfoNone", "Aus");
                s = s.replace("stringTableDisplayBeepAtStatusInfoTone1", "Ton 1");
                s = s.replace("stringTableDisplayBeepAtStatusInfoTone2", "Ton 2");
                s = s.replace("stringTableDisplayBeepAtStatusInfoTone3", "Ton 3");
                s = s.replace("stringTableDisplayBell", "Glockensymbol");
                s = s.replace("stringTableDisplayBlind", "Rollladensymbol");
                s = s.replace("stringTableDisplayBulb", "Lampensymbol");
                s = s.replace("stringTableDisplayClock", "Uhrsymbol");
                s = s.replace("stringTableDisplayDoor", "Türsymbol");
                s = s.replace("stringTableDisplayPhone", "Telefonsymbol");
                s = s.replace("stringTableDisplayScene", "Szenensymbol");
                s = s.replace("stringTableDisplayWindow", "Fenstersymbol");
                s = s.replace("stringTableDisplayMessageShowTime", "Anzeigedauer für Zentralen-Nachrichten");
                s = s.replace("stringTableDisplayMessageShowTimePermanent", "dauerhaft");
                s = s.replace("stringTableDisplayServiceCount", "Anzahl Servicemeldungen");
                s = s.replace("stringTableDisplaySubmit", "Displaynachricht übertragen");
                s = s.replace("stringTableDisplaySwitch", "Schaltersymbol");
                s = s.replace("stringTableDisplayText", "Text");
                s = s.replace("stringTableDisplayUnitCelsius", "Einheit Celsius");
                s = s.replace("stringTableDisplayUnitFahrenheit", "Einheit Fahrenheit");
                s = s.replace("stringTableDisplayUnitNone", "Keine Einheit");
                s = s.replace("stringTableDisplayUnitPercent", "Einheit Prozent");
                s = s.replace("stringTableDisplayUnitWatt", "Einheit Watt");
                s = s.replace("stringTableDisplayEnergyOptions", "Die Anzeige schaltet sich aus nach");
                s = s.replace("stringTableDisplayBrightness", "Anzeigehelligkeit");
                s = s.replace("stringTableError", "Fehler");
                s = s.replace("stringTableErrorNoError", "Kein Fehler");
                s = s.replace("stringTableErrorOverheatFalse", "keine Überhitzung");
                s = s.replace("stringTableErrorOverheatTrue", "Überhitzung");
                s = s.replace("stringTableErrorOverloadFalse", "keine Stromüberlastung");
                s = s.replace("stringTableErrorOverloadTrue", "Stromüberlastung");
                s = s.replace("stringTableErrorPowerTrue", "Netzspannung OK");
                s = s.replace("stringTableErrorPowerFalse", "Netzspannung fehlerhaft");
                s = s.replace("stringTableErrorReducedFalse", "volle Leistung möglich");
                s = s.replace("stringTableErrorReducedTrue", "reduzierte Leistung");
                s = s.replace("stringTableErrorSabotageFalse", "Sabotage ausgelöst");
                s = s.replace("stringTableErrorSabotageTrue", "Sabotage OK");
                s = s.replace("stringTableFrequencyInput", "Analog");
                s = s.replace("stringTableInhibit", "Sperrung");
                s = s.replace("stringTableInhibitFalse", "Sperrung inaktiv");
                s = s.replace("stringTableInhibitTrue", "Sperrung aktiv");
                s = s.replace("stringTableInputOutput", "IO-Interface");
                s = s.replace("stringTableInputOutputBehaviour", "Funktion");
                s = s.replace("stringTableInputOutputBehaviourInput", "Eingang");
                s = s.replace("stringTableInputOutputBehaviourOutput", "Ausgang");
                s = s.replace("stringTableInputOutputInputLocked", "Eingang gesperrt");
                s = s.replace("stringTableInputOutputInputType", "Eingangssignal");
                s = s.replace("stringTableInputOutputTypePushButton", "Taster");
                s = s.replace("stringTableInputOutputTypeSwitch", "Schalter");
                s = s.replace("stringTableInputOutputLongPressA", "Zeit bis langer Tastendruck erkannt wird");
                s = s.replace("stringTableInputOutputLongPressB", "Zeit bis langer Tastendruck erkannt wird");
                s = s.replace("stringTableInputOutputStateFalse", "Schaltzustand: aus");
                s = s.replace("stringTableInputOutputStateTrue", "Schaltzustand: ein");
                s = s.replace("stringTableKeyMaticTitle", "KeyMatic");
                s = s.replace("stringTableKeyMaticAngleLocked", "Drehwinkel Stellung verriegelt");
                s = s.replace("stringTableKeyMaticAngleMax", "Drehwinkel Endanschlag verriegelt");
                s = s.replace("stringTableKeyMaticAngleOpen", "Drehwinkel Endanschlag Tür öffnen");
                s = s.replace("stringTableKeyMaticErrorClutch", "Einkuppeln fehlgeschlagen");
                s = s.replace("stringTableKeyMaticErrorMotorAborted", "Motorlauf abgebrochen");
                s = s.replace("stringTableKeyMaticHoldPWM", "Motorkraft Haltezeit Tür öffnen");
                s = s.replace("stringTableKeyMaticHoldTime", "Haltezeit Tür öffnen");
                s = s.replace("stringTableKeyMaticLEDFlashLocked", "LED blinkt wenn verriegelt");
                s = s.replace("stringTableKeyMaticLEDFlashUnlocked", "LED blinkt wenn nicht verriegelt");
                s = s.replace("stringTableKeyMaticOpen", "Tür öffnen");
                s = s.replace("stringTableKeyMaticRelockDelay", "Automatisch verriegeln nach Zeit");
                s = s.replace("stringTableKeyMaticRelockDelayNotUsed", "Nicht automatisch verriegeln");
                s = s.replace("stringTableKeyMaticSetupDir", "Drehrichtung verriegeln");
                s = s.replace("stringTableKeyMaticSetupDirLeft", "nach links");
                s = s.replace("stringTableKeyMaticSetupDirRight", "nach rechts");
                s = s.replace("stringTableKeyMaticSetupPosition", "Drehwinkel Neutralstellung");
                s = s.replace("stringTableKeyMaticStateFalse", "Schloss verriegelt");
                s = s.replace("stringTableKeyMaticStateTrue", "Schloss entriegelt");
                s = s.replace("stringTableKeyMaticStateUncertainFalse", "Schlosszustand bekannt");
                s = s.replace("stringTableKeyMaticStateUncertainTrue", "Schloszustand unbekannt");
                s = s.replace("stringTableKeyPressSignal", "Tastenton");
                s = s.replace("stringTableKeyTitle", "Taster");
                s = s.replace("stringTableKeyDblPressTime", "Doppelklick-Zeit (Tastensperre)");
                s = s.replace("stringTableKeyInputLocked", "Eingang gesperrt");
                s = s.replace("stringTableKeyInputType", "Eingangsbeschaltung");
                s = s.replace("stringTableKeyInputTypePushButton", "Taster");
                s = s.replace("stringTableKeyInputTypeSwitch", "Schalter");
                s = s.replace("stringTableKeyLongPressTimeA", "Mindestdauer für langen Tastendruck");
                s = s.replace("stringTableKeyLongPressTimeB", "Mindestdauer für langen Tastendruck");
                s = s.replace("stringTableKeyText1", "Text Zeile 1 ");
                s = s.replace("stringTableKeyText2", "Text Zeile 2");
                s = s.replace("stringTableLanguage", "Sprache");
                s = s.replace("stringTableLanguageEnglish", "Englisch");
                s = s.replace("stringTableLanguageGerman", "Deutsch");
                s = s.replace("stringTableLEDSleepModeOff", "Anzeige aus dem Ruhezustand holen");
                s = s.replace("stringTableLEDSleepModeOn", "Anzeige in Ruhezustand bringen");
                s = s.replace("stringTableLEDStatusOff", "Anzeige aus");
                s = s.replace("stringTableLEDStatusRed", "Anzeige rot");
                s = s.replace("stringTableLEDStatusGreen", "Anzeige grün");
                s = s.replace("stringTableLEDStatusOrange", "Anzeige orange");
                s = s.replace("stringTableLiveModeRX", "Live Mode");
                s = s.replace("stringTableLocalResetDisable", "Reset per Gerätetaste sperren");
                s = s.replace("stringTableLogging", "Logging");
                s = s.replace("stringTableLoggingFalse", "deaktiviert");
                s = s.replace("stringTableLoggingOff", "deaktiviert");
                s = s.replace("stringTableLoggingOn", "aktiviert");
                s = s.replace("stringTableLoggingTrue", "aktiviert");
                s = s.replace("stringTableLoggingTime", "Zeit nach der Logging-Meldung verschickt wird");
                s = s.replace("stringTableLogicInactive", "Kanal inaktiv");
                s = s.replace("stringTableLogicOR", "OR (höherer Pegel hat Priorität)");
                s = s.replace("stringTableLogicAND", "AND (niedriger Pegel hat Priorität)");
                s = s.replace("stringTableLogicXOR", "XOR (wie OR, aber wenn beide Pegel > 0, dann ist das Ergebnis 0)");
                s = s.replace("stringTableLogicNOR", "NOR (wie OR, aber mit anschließender Invertierung des Pegels)");
                s = s.replace("stringTableLogicNAND", "NAND (wie AND, aber mit anschließender Invertierung des Pegels)");
                s = s.replace("stringTableLogicORINVERS", "OR_INVERS (OR mit vorheriger Invertierung des Kanal-Pegels)");
                s = s.replace("stringTableLogicANDINVERS", "AND_INVERS (AND mit vorheriger Invertierung des Kanal-Pegels)");
                s = s.replace("stringTableLogicPLUS", "PLUS (Pegel-Addition, Maximum = 100%)");
                s = s.replace("stringTableLogicMINUS", "MINUS (Pegel-Subtraktion, Minimum = 0%)");
                s = s.replace("stringTableLogicMUL", "MULTI MULTI (Pegel-Multiplikation Maximum = 100%)");
                s = s.replace("stringTableLogicPLUSINVERS", "PLUS_INVERS (PLUS mit vorheriger Invertierung des Pegels)");
                s = s.replace("stringTableLogicMINUSINVERS", "MINUS_INVERS (MINUS mit vorheriger Invertierung des Pegels)");
                s = s.replace("stringTableLogicMULINVERS", "MULTI_INVERS (MULTI mit vorheriger Invertierung des Pegels)");
                s = s.replace("stringTableLogicINVERSPLUS", "INVERS_PLUS (wie PLUS, aber mit anschließender Invertierung des Pegels)");
                s = s.replace("stringTableLogicINVERSMINUS", "INVERS_MINUS (wie MINUS, aber mit anschließender Invertierung des Pegels)");
                s = s.replace("stringTableLogicINVERSMUL", "INVERS_MULTI (wie MULTI, aber mit anschließender Invertierung des Pegels)");
                s = s.replace("stringTableMinute", "min");
                s = s.replace("stringTableMotionDetectorTitle", "Bewegungsmelder");
                s = s.replace("stringTableMotionDetectorBrightness", "Helligkeit");
                s = s.replace("stringTableMotionDetectorBrightnessFilter", "Helligkeitsfilter");
                s = s.replace("stringTableMotionDetectorErrorSabotage", "Sabotage");
                s = s.replace("stringTableMotionDetectorEventFilterNumber", "Empfindlichkeit");
                s = s.replace("stringTableMotionDetectorEventFilterPeriod", "Filterzeitraum");
                s = s.replace("stringTableMotionDetectorLEDOnTime", "LED-Leuchtzeit (gn/rt)");
                s = s.replace("stringTableMotionDetectorMinInterval", "Mindestendabstand");
                s = s.replace("stringTableMotionDetectorMotionFalse", "keine Bewegung");
                s = s.replace("stringTableMotionDetectorMotionTrue", "Bewegung erkannt");
                s = s.replace("stringTableMotionDetectorCaptureWithinInterval", "Innerhalb des Sendeabstandes erkannte Bewegung senden:");
                s = s.replace("stringTablePowerUpOFF", "keine");
                s = s.replace("stringTablePowerUpON", "kurzen Tastendruck simulieren");
                s = s.replace("stringTableKeyPressLong", "Tastendruck lang");
                s = s.replace("stringTableKeyPressLongTrue", "Tastendruck lang");
                s = s.replace("stringTableKeyPressShort", "Tastendruck kurz");
                s = s.replace("stringTableKeyPressShortTrue", "Tastendruck kurz");
                s = s.replace("stringTablePulseSensorTitle", "Puls-Sensor");
                s = s.replace("stringTablePulseSensorSequenceOk", "betätigt");
                s = s.replace("stringTablePulseSensorSequencePulse1", "Puls 1 in s");
                s = s.replace("stringTablePulseSensorSequencePulse1Unused", "nicht benutzt");
                s = s.replace("stringTablePulseSensorSequencePulse2", "Pause 1 in s");
                s = s.replace("stringTablePulseSensorSequencePulse2Unused", "nicht benutzt");
                s = s.replace("stringTablePulseSensorSequencePulse3", "Puls 2 in s");
                s = s.replace("stringTablePulseSensorSequencePulse3Unused", "nicht benutzt");
                s = s.replace("stringTablePulseSensorSequencePulse4", "Pause 2 in s");
                s = s.replace("stringTablePulseSensorSequencePulse4Unused", "nicht benutzt");
                s = s.replace("stringTablePulseSensorSequencePulse5", "Puls 3 in s");
                s = s.replace("stringTablePulseSensorSequencePulse5Unused", "nicht benutzt");
                s = s.replace("stringTablePulseSensorSequenceTolerance", "Toleranz in s");
                s = s.replace("stringTableRestartOff", "keine");
                s = s.replace("stringTableRestartLast", "alten Zustand herstellen");
                s = s.replace("stringTableRestartButtonPress", "kurzen Tastendruck simulieren");
                s = s.replace("stringTableRestartButtonPressIfWasOn", "kurzen Tastendruck simulieren, falls zuvor eingeschaltet war");
                s = s.replace("stringTableRHSTitle", "Fenster-Drehgriffkontakt");
                s = s.replace("stringTableRHSErrorSabotage", "Sabotage");
                s = s.replace("stringTableRHSEventDelayTime", "Meldeverzögerung");
                s = s.replace("stringTableRHSLEDOnTime", "LED-Leuchtzeit (gn/rt)");
                s = s.replace("stringTableRHSMsgPosA", "Meldung in Position unten");
                s = s.replace("stringTableRHSMsgPosAClosed", "zu");
                s = s.replace("stringTableRHSMsgPosANoMsg", "keine Meldung");
                s = s.replace("stringTableRHSMsgPosAOpen", "offen");
                s = s.replace("stringTableRHSMsgPosATilted", "gekippt");
                s = s.replace("stringTableRHSMsgPosB", "Meldung in Position quer");
                s = s.replace("stringTableRHSMsgPosBClosed", "zu");
                s = s.replace("stringTableRHSMsgPosBNoMsg", "keine Meldung");
                s = s.replace("stringTableRHSMsgPosBOpen", "offen");
                s = s.replace("stringTableRHSMsgPosBTilted", "gekippt");
                s = s.replace("stringTableRHSMsgPosC", "Meldung in Position oben");
                s = s.replace("stringTableRHSMsgPosCClosed", "zu");
                s = s.replace("stringTableRHSMsgPosCNoMsg", "keine Meldung");
                s = s.replace("stringTableRHSMsgPosCOpen", "offen");
                s = s.replace("stringTableRHSMsgPosCTilted", "gekippt");
                s = s.replace("stringTableRHSStateClosed", "Fensterzustand: verriegelt");
                s = s.replace("stringTableRHSStateOpen", "Fensterzustand: offen");
                s = s.replace("stringTableRHSStateTilted", "Fensterzustand: gekippt");
                s = s.replace("stringTableSabotageMsg", "Sabotagemeldung");
                s = s.replace("stringTableSensorFalse", "geschlossen");
                s = s.replace("stringTableSensorTrue", "offen");
                s = s.replace("stringTableSensorInputLocked", "Eingang gesperrt");
                s = s.replace("stringTableSensorCO2Title", "Luftgütesensor");
                s = s.replace("stringTableSensorCO2EventFilterTime", "Filterzeit");
                s = s.replace("stringTableSensorCO2MsgPosA0", "Meldung bei normaler CO2-Konzentation");
                s = s.replace("stringTableSensorCO2MsgPosA1", "CO2-Konzentration normal");
                s = s.replace("stringTableSensorCO2MsgPosA2", "keine Meldung");
                s = s.replace("stringTableSensorCO2MsgPosB0", "Meldung bei erhöhter CO2-Konzentation");
                s = s.replace("stringTableSensorCO2MsgPosB1", "keine Meldung");
                s = s.replace("stringTableSensorCO2MsgPosB2", "CO2-Konzentration normal");
                s = s.replace("stringTableSensorCO2MsgPosB3", "CO2-Konzentration erhöht");
                s = s.replace("stringTableSensorCO2MsgPosB4", "CO2-Konzentration stark erhöht");
                s = s.replace("stringTableSensorCO2MsgPosC0", "Meldung bei deutlich erhöhter CO2-Konzentation");
                s = s.replace("stringTableSensorCO2MsgPosC1", "keine Meldung");
                s = s.replace("stringTableSensorCO2MsgPosC2", "CO2-Konzentration normal");
                s = s.replace("stringTableSensorCO2MsgPosC3", "CO2-Konzentration erhöht");
                s = s.replace("stringTableSensorCO2MsgPosC4", "CO2-Konzentration stark erhöht");
                s = s.replace("stringTableSensorCO2MsgPosD0", "Meldung bei stark erhöhter CO2-Konzentation");
                s = s.replace("stringTableSensorCO2MsgPosD1", "keine Meldung");
                s = s.replace("stringTableSensorCO2MsgPosD2", "CO2-Konzentration normal");
                s = s.replace("stringTableSensorCO2MsgPosD3", "CO2-Konzentration erhöht");
                s = s.replace("stringTableSensorCO2MsgPosD4", "CO2-Konzentration stark erhöht");
                s = s.replace("stringTableSensorCO2LevelOk", "CO2-Konzentration normal");
                s = s.replace("stringTableSensorCO2LevelHigh", "CO2-Konzentration erhöht");
                s = s.replace("stringTableSensorCO2LevelStrong", "CO2-Konzentration stark erhöht");
                s = s.replace("stringTableShutterContactTitle", "Schließerkontakt");
                s = s.replace("stringTableShutterContactErrorSabotage", "Sabotage");
                s = s.replace("stringTableShutterContactEventDelayTime", "Meldeverzögerung");
                s = s.replace("stringTableShutterContactLEDOnTime", "LED-Leuchtzeit (gn/rt)");
                s = s.replace("stringTableShutterContactMsgPosA0", "Meldung in Position geschlossen");
                s = s.replace("stringTableShutterContactMsgPosA1", "zu");
                s = s.replace("stringTableShutterContactMsgPosA2", "keine Meldung");
                s = s.replace("stringTableShutterContactMsgPosA3", "offen");
                s = s.replace("stringTableShutterContactMsgPosB0", "Meldung in Position offen");
                s = s.replace("stringTableShutterContactMsgPosB1", "zu");
                s = s.replace("stringTableShutterContactMsgPosB2", "keine Meldung");
                s = s.replace("stringTableShutterContactMsgPosB3", "offen");
                s = s.replace("stringTableShutterContactStateFalse", "geschlossen");
                s = s.replace("stringTableShutterContactStateTrue", "offen");
                s = s.replace("stringTableSignal", "Bestätigungston");
                s = s.replace("stringTableSignalTone", "Klang Bestätigungston");
                s = s.replace("stringTableSignalToneHigh", "hoch");
                s = s.replace("stringTableSignalToneLow", "tief");
                s = s.replace("stringTableSignalToneMid", "mittel");
                s = s.replace("stringTableSignalToneVeryHigh", "sehr hoch");
                s = s.replace("stringTableSignalLEDTitle", "Signalaktor (optisch)");
                s = s.replace("stringTableSignalLEDActNum", "Anzahl der Signale");
                s = s.replace("stringTableSignalLEDActType", "Art der Signale");
                s = s.replace("stringTableSignalLEDOnTime", "Einschaltdauer");
                s = s.replace("stringTableSignalLEDStateTrue", "Ein");
                s = s.replace("stringTableSignalLEDStateFalse", "Aus");
                s = s.replace("stringTableSignalChimeTitle", "Signalaktor (akustisch)");
                s = s.replace("stringTableSignalChimeActNum", "Anzahl der Signale");
                s = s.replace("stringTableSignalChimeActType", "Art der Signale");
                s = s.replace("stringTableSignalChimeOnTime", "Einschaltdauer");
                s = s.replace("stringTableSignalChimeStateTrue", "Ein");
                s = s.replace("stringTableSignalChimeStateFalse", "Aus");
                s = s.replace("stringTableSmokeDetectorTitle", "Rauchmelder");
                s = s.replace("stringTableSmokeDetectorStateFalse", "Kein Rauch erkannt");
                s = s.replace("stringTableSmokeDetectorStateTrue", "Rauch erkannt");
                s = s.replace("stringTableStandByTime", "Zeit bis zum Standby-Modus");
                s = s.replace("stringTableStatusIndicatorTitle", "Statusanzeige");
                s = s.replace("stringTableStatusIndicatorStateTrue", "Schaltzustand ein");
                s = s.replace("stringTableStatusIndicatorStateFalse", "Schaltzustand aus");
                s = s.replace("stringTableStatusIndicatorOnTime", "Einschaltdauer");
                s = s.replace("stringTableStatusIndicatorInhibitTrue", "Sperrung aktiv");
                s = s.replace("stringTableStatusIndicatorInhibitFalse", "Sperrung inaktiv");
                s = s.replace("stringTableSubmit", "Kanalaktion");
                s = s.replace("stringTableSwitchTitle", "Schaltaktor");
                s = s.replace("stringTableSwitchAESActive", "AES aktiv");
                s = s.replace("stringTableSwitchOnTime", "Einschaltdauer");
                s = s.replace("stringTableSwitchStateFalse", "Schaltzustand: aus");
                s = s.replace("stringTableSwitchStateTrue", "Schaltzustand: ein");
                s = s.replace("stringTableSwitchInterfaceTitle", "Schalter-Interface");
                s = s.replace("stringTableSwitchInterfacePress", "betätigt");
                s = s.replace("stringTableSwitchInterfaceStateFalse", "Schalterposition: unten gedrückt");
                s = s.replace("stringTableSwitchInterfaceStateTrue", "Schalterposition: oben gedrückt");
                s = s.replace("stringTableTiltSensorTitle", "Neigungssensor");
                s = s.replace("stringTableTiltSensorEventFilterTime", "Filterzeit");
                s = s.replace("stringTableTiltSensorLEDOnTime", "LED-Leuchtzeit (gn/rt)");
                s = s.replace("stringTableTiltSensorMsgPosA0", "Meldung in Position senkrecht");
                s = s.replace("stringTableTiltSensorMsgPosA1", "zu");
                s = s.replace("stringTableTiltSensorMsgPosA2", "keine Meldung");
                s = s.replace("stringTableTiltSensorMsgPosA3", "auf");
                s = s.replace("stringTableTiltSensorMsgPosB0", "Meldung in Position waagerecht");
                s = s.replace("stringTableTiltSensorMsgPosB1", "zu");
                s = s.replace("stringTableTiltSensorMsgPosB2", "keine Meldung");
                s = s.replace("stringTableTiltSensorMsgPosB3", "auf");
                s = s.replace("stringTableTiltSensorStateFalse", "Zustand geschlossen");
                s = s.replace("stringTableTiltSensorStateTrue", "Zustand offen");
                s = s.replace("stringTableTransmitTryMax", "Max. Sendeversuche");
                s = s.replace("stringTableTransmitDevTryMax", "Max. Sendeversuche");
                s = s.replace("stringTableVentClosed", "Ventil schließen");
                s = s.replace("stringTableVentOpen", "Ventil öffnen");
                s = s.replace("stringTableVirtualDimmerTitle", "Dimmaktor");
                s = s.replace("stringTableVirtualDimmerErrorLoadFailure", "Lastfehler");
                s = s.replace("stringTableVirtualDimmerLogicCombination", "Verknüpfungsregel");
                s = s.replace("stringTableVirtualDimmerPowerUpAction", "Aktion bei Spannungszufuhr");
                s = s.replace("stringTableVirtualDimmerStatusInfoMinDelay", "Statusmeldungen Mindestverzögerungen");
                s = s.replace("stringTableVirtualDimmerStatusInfoRandom", "Statusmeldungen Zufallsanteil");
                s = s.replace("stringTableVirtualKeyTitle", "Virtuelle Fernbedienung");
                s = s.replace("stringTableVirtualKeyLevel", "Prozentwert senden");
                s = s.replace("stringTableVolume10", "Lautstärke 100%");
                s = s.replace("stringTableVolume9", "Lautstärke 90% ");
                s = s.replace("stringTableVolume8", "Lautstärke 80% ");
                s = s.replace("stringTableVolume7", "Lautstärke 70% ");
                s = s.replace("stringTableVolume6", "Lautstärke 60% ");
                s = s.replace("stringTableVolume5", "Lautstärke 50% ");
                s = s.replace("stringTableVolume4", "Lautstärke 40% ");
                s = s.replace("stringTableVolume3", "Lautstärke 30% ");
                s = s.replace("stringTableVolume2", "Lautstärke 20% ");
                s = s.replace("stringTableVolume1", "Lautstärke 10% ");
                s = s.replace("stringTableVolume0", "Lautstärke 0% ");
                s = s.replace("stringTableWDSTitle", "Wasserdetektor");
                s = s.replace("stringTableWDSEventFilterTime", "Filterzeit");
                s = s.replace("stringTableWDSMsgPosA0", "Trockenheit");
                s = s.replace("stringTableWDSMsgPosA1", "Trocken");
                s = s.replace("stringTableWDSMsgPosA2", "keine Meldung");
                s = s.replace("stringTableWDSMsgPosB0", "Feuchtigkeit");
                s = s.replace("stringTableWDSMsgPosB1", "Trocken");
                s = s.replace("stringTableWDSMsgPosB2", "keine Meldung");
                s = s.replace("stringTableWDSMsgPosB3", "Wasserstand erkannt");
                s = s.replace("stringTableWDSMsgPosB4", "Feuchtigkeit erkannt");
                s = s.replace("stringTableWDSMsgPosC0", "Wasserstand");
                s = s.replace("stringTableWDSMsgPosC1", "keine Meldung");
                s = s.replace("stringTableWDSMsgPosC2", "Wasserstand erkannt");
                s = s.replace("stringTableWDSMsgPosC3", "Feuchtigkeit erkannt");
                s = s.replace("stringTableWDSStateDry", "Trocken");
                s = s.replace("stringTableWDSStateWater", "Wasserstand erkannt");
                s = s.replace("stringTableWDSStateWet", "Feuchtigkeit erkannt");
                s = s.replace("stringTableWDSEventFilterTime", "Filterzeit");
                s = s.replace("stringTableWeatherTitle", "Wettersensor");
                s = s.replace("stringTableWeatherAirPressure", "Luftdruck");
                s = s.replace("stringTableWeatherBrightness", "Helligkeit");
                s = s.replace("stringTableWeatherHumidity", "Relative Luftfeuchte");
                s = s.replace("stringTableWeatherRaining", "Regen");
                s = s.replace("stringTableWeatherRainingFalse", "aktuell kein Regen");
                s = s.replace("stringTableWeatherRainingTrue", "aktuell Regen");
                s = s.replace("stringTableWeatherRainCounter", "Regenmenge");
                s = s.replace("stringTableWeatherStormLowerThres", "Windalarm-Ausschaltschwelle");
                s = s.replace("stringTableWeatherStormUpperThres", "Windalarm-Einschaltschwelle");
                s = s.replace("stringTableWeatherSunshineDuration", "Sonnenscheindauer");
                s = s.replace("stringTableWeatherSunshineThres", "Sonnenscheinschwelle");
                s = s.replace("stringTableWeatherTemperature", "Temperatur");
                s = s.replace("stringTableWeatherWindDir", "Windrichtung");
                s = s.replace("stringTableWeatherWindDirRange", "Windrichtung Schwankungsbreite");
                s = s.replace("stringTableWeatherWindSpeed", "Windgeschwindigkeit");
                s = s.replace("stringTableWindowSwitchReceiver", "Heizkörperthermostat");
                s = s.replace("stringTableWinMaticTitle", "Fenster-Kippantrieb");
                s = s.replace("stringTableWinMaticErrorMotorTilt", "Fehler Kippantrieb");
                s = s.replace("stringTableWinMaticErrorMotorTurn", "Fehler Drehantrieb");
                s = s.replace("stringTableWinMaticLevel", "Kippstellung");
                s = s.replace("stringTableWinMaticLevelLocked", "Fenster verriegelt");
                s = s.replace("stringTableWinMaticMountSide", "Montageseite");
                s = s.replace("stringTableWinMaticMountSideLeft", "links");
                s = s.replace("stringTableWinMaticMountSideRight", "rechts");
                s = s.replace("stringTableWinMaticPullForce", "Kraft Kippantrieb beim Schließen");
                s = s.replace("stringTableWinMaticPushForce", "Kraft Kippantrieb beim Öffnen");
                s = s.replace("stringTableWinMaticReLockDelay", "Automatisch verriegeln nach Zeit");
                s = s.replace("stringTableWinMaticReLockDelayNotUsed", "Nicht automatisch verriegeln");
                s = s.replace("stringTableWinMaticSpeed", "Geschwindigkeit für durch Zentralenbefehl ausgelöste Aktion");
                s = s.replace("stringTableWinMaticStateUncertainFalse", "Fensterzustand bekannt");
                s = s.replace("stringTableWinMaticStateUncertainTrue", "Fensterzustand unbekannt");
                s = s.replace("stringTableWinMaticStop", "Anhalten");
                s = s.replace("stringTableWinMaticTiltMax", "maximale Kippweite");
                s = s.replace("stringTableWSCS", "Wetterstation");
                s = s.replace("stringTableWSTH", "Wetterstation");
                s = s.replace("stringTableNotUsed", "Nicht benutzt");
                s = s.replace("stringTableEnterValue", "Wert eingeben");
                s = s.replace("stringTableExpectAES", "AES-Verschlüsselung");
                s = s.replace("stringTablePeerNeedsBurst", "Burstsignal erforderlich");
                s = s.replace("stringTableParamSelect", "Sensorauswahl Wettertelegramm");
                s = s.replace("stringTableParamSelectInactive", "Keine Übertragung");
                s = s.replace("stringTableParamSelectT1", "Temperatur Sensor 1");
                s = s.replace("stringTableParamSelectT2", "Temperatur Sensor 2");
                s = s.replace("stringTableParamSelectT1MinusT2", "Differenz-Temperatursensor 1 - Sensor 2");
                s = s.replace("stringTableParamSelectT2MinusT1", "Differenz-Temperatursensor 2 - Sensor 1");
                s = s.replace("stringTableRainDetector", "Regensensor");
                s = s.replace("stringTableRainDetectorDry", "Trockenheit");
                s = s.replace("stringTableRainDetectorRain", "Regen");
                s = s.replace("stringTableEventFilterTime", "Filterzeit");
                s = s.replace("stringTableRainDetectorHeatingOn", "Heizung Ein");
                s = s.replace("stringTableRainDetectorHeatingOff", "Heizung Aus");
                // }
                // else {
                //
                // }

            }
        }
        return s;
    }

    public static String getTranslatedString(String s) {

        if (s.startsWith("${") || s.startsWith("room") || s.startsWith("func")) {

            if (locale == null) {
                locale = Locale.getDefault().getLanguage().toString();
            }

            s = s.trim();

            if (s.length() > 1) {

                s = s.replace("${", "");
                s = s.replace("}", "");

                if (locale.equals("de")) {

                    s = s.replace("roomLivingRoom", "Wohnzimmer");
                    s = s.replace("roomKitchen", "Küche");
                    s = s.replace("roomBedroom", "Schlafzimmer");
                    s = s.replace("roomChildrensRoom1", "Kinderzimmer 1");
                    s = s.replace("roomChildrensRoom2", "Kinderzimmer 2");
                    s = s.replace("roomOffice", "Büro");
                    s = s.replace("roomBathroom", "Badezimmer");
                    s = s.replace("roomGarage", "Garage");
                    s = s.replace("roomHWR", "Hauswirtschaftsraum");
                    s = s.replace("roomGarden", "Garten");
                    s = s.replace("roomTerrace", "Terrasse");

                    s = s.replace("funcLight", "Licht");
                    s = s.replace("funcHeating", "Heizung");
                    s = s.replace("funcClimateControl", "Klima");
                    s = s.replace("funcWeather", "Wetter");
                    s = s.replace("funcEnvironment", "Umwelt");
                    s = s.replace("funcSecurity", "Sicherheit");
                    s = s.replace("funcLock", "Verschluss");
                    s = s.replace("funcButton", "Taster");
                    s = s.replace("funcCentral", "Zentrale");
                    s = s.replace("funcEnergy", "Energiemanagement");

                    s = s.replace("sysVarAlarmZone1NotTriggered", "nicht ausgelöst");
                    s = s.replace("sysVarAlarmZone1Triggered", "ausgelöst");
                    s = s.replace("sysVarAlarmZone1Msg", "Alarmmeldung Alarmzone 1");
                    s = s.replace("sysVarAlarmZone1", "Alarmzone 1");
                    s = s.replace("sysVarPresenceNotPresent", "nicht anwesend");
                    s = s.replace("sysVarPresencePresent", "anwesend");
                    s = s.replace("sysVarPresenceMsg", "Anwesenheit");
                    s = s.replace("sysVarPresence", "Anwesenheit");
                    s = s.replace("sysVarAlarmMessagesCount", "Anzahl Alarmmeldungen");
                    s = s.replace("sysVarAlarmMessages", "Alarmmeldungen");
                    s = s.replace("sysVarServiceMessagesCount", "Anzahl Servicemeldungen");
                    s = s.replace("sysVarServiceMessages", "Servicemeldungen");
                    s = s.replace("sysVarRainToday", "Regen heute");
                    s = s.replace("sysVarRainYesterday", "Regen gestern");
                } else {
                    s = s.replace("roomLivingRoom", "Living Room");
                    s = s.replace("roomKitchen", "Kitchen");
                    s = s.replace("roomBedroom", "Bedroom");
                    s = s.replace("roomChildrensRoom1", "Children´s Room 1");
                    s = s.replace("roomChildrensRoom2", "Children´s Room 2");
                    s = s.replace("roomOffice", "Office");
                    s = s.replace("roomBathroom", "Bathroom");
                    s = s.replace("roomGarage", "Garage");
                    s = s.replace("roomHWR", "HWR");
                    s = s.replace("roomGarden", "Garden");
                    s = s.replace("roomTerrace", "Terrace");

                    s = s.replace("funcLight", "Light");
                    s = s.replace("funcHeating", "Heating");
                    s = s.replace("funcClimateControl", "Climate");
                    s = s.replace("funcWeather", "Weather");
                    s = s.replace("funcEnvironment", "Environment");
                    s = s.replace("funcSecurity", "Security");
                    s = s.replace("funcLock", "Locking");
                    s = s.replace("funcButton", "Buttons");
                    s = s.replace("funcCentral", "Central");
                    s = s.replace("funcEnergy", "Energy management");

                    s = s.replace("sysVarAlarmZone1NotTriggered", "not triggered");
                    s = s.replace("sysVarAlarmZone1Triggered", "triggered");
                    s = s.replace("sysVarAlarmZone1Msg", "alert message alarm zone 1");
                    s = s.replace("sysVarAlarmZone1", "alert zone 1");
                    s = s.replace("sysVarPresenceNotPresent", "not present");
                    s = s.replace("sysVarPresencePresent", "present");
                    s = s.replace("sysVarPresenceMsg", "Presence");
                    s = s.replace("sysVarPresence", "Presence");
                    s = s.replace("sysVarAlarmMessagesCount", "Number of alarm messages");
                    s = s.replace("sysVarAlarmMessages", "alert messages");
                    s = s.replace("sysVarServiceMessagesCount", "Number of service messages");
                    s = s.replace("sysVarServiceMessages", "service messages");
                    s = s.replace("sysVarRainToday", "Rain today");
                    s = s.replace("sysVarRainYesterday", "Rain yesterday");

                }
            }
        }

        return s;
    }

}
