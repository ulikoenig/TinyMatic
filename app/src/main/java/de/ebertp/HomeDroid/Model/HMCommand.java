package de.ebertp.HomeDroid.Model;


import android.content.Context;
import android.database.Cursor;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.GenericRawResults;
import com.j256.ormlite.field.DataType;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTableConfig;

import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import de.ebertp.HomeDroid.DbAdapter.BaseDbAdapter;
import de.ebertp.HomeDroid.DbAdapter.DataBaseAdapterManager;
import de.ebertp.HomeDroid.HomeDroidApp;
import de.ebertp.HomeDroid.Utils.PrefixHelper;
import de.ebertp.HomeDroid.ViewAdapter.CursorToObjectHelper;


public class HMCommand {


    private static int HISTORY_SIZE = 50;
    public static final int TYPE_CHANNEL = 0;

    public static final int TYPE_VARIABLE = 1;
    public static final int TYPE_DATAPOINT = 2;
    public static final int TYPE_SCRIPT = 3;
    // id is generated by the database and set on the object automagically
    @DatabaseField(generatedId = true)
    int id;
    @DatabaseField
    int rowId;
    @DatabaseField
    int type;
    @DatabaseField
    String value;
    @DatabaseField(dataType = DataType.DATE)
    Date timestamp;

    private static final String COLUMN_TIMESTAMP = "timestamp";
    private static final String COLUMN_ROWID = "rowid";
    private static final String COLUMN_TYPE = "type";

    public HMCommand() {

    }

    public HMCommand(int rowId, int type, String value, Date timestamp) {
        this.rowId = rowId;
        this.type = type;
        this.value = value;
        this.timestamp = timestamp;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getRowId() {
        return rowId;
    }

    public void setRowId(int rowId) {
        this.rowId = rowId;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public Date getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Date timestamp) {
        this.timestamp = timestamp;
    }

    public static void addCommandToHistory(Context ctx, HMCommand command) {

        try {
            Dao<HMCommand, Integer> dao = HomeDroidApp.db().getCommandDao();
            dao.create(command);
            List<HMCommand> foo = dao.queryForAll();

            if (dao.countOf() > HISTORY_SIZE) {
                HMCommand removeMe = dao.queryForAll().get(0);
                dao.delete(removeMe);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static String getObjectName(Context ctx, HMCommand command) {
        return getObjectName(ctx, command.getRowId(), command.getType());
    }

    public static int getObjectResForIcon(Context ctx, HMCommand command) {

        if (command.getType() == TYPE_DATAPOINT) {
            Cursor c = HomeDroidApp.db().datapointDbAdapter.fetchItem(command.getRowId());

            if (c.getCount() == 0) {
                return -1;
            }

            int channelId = c.getInt(c.getColumnIndex("channel_id"));
            c.close();
            return channelId;
        }
        return command.getRowId();

    }

    public static HMObject getHMObject(Context ctx, int rowId, int type, boolean detectUnrenamedChannel) {
        DataBaseAdapterManager dataBaseAdapterManager = HomeDroidApp.db();

        HMObject hmObject = null;

        if (type == TYPE_CHANNEL) {
            Cursor c = dataBaseAdapterManager.channelsDbAdapter.fetchItem(rowId);
            if (c.getCount() != 0) {
                hmObject = CursorToObjectHelper.convertCursorToChannel(detectUnrenamedChannel, c);
            }
            c.close();

        } else if (type == TYPE_DATAPOINT) {
            Cursor c = dataBaseAdapterManager.datapointDbAdapter.fetchItem(rowId);
            if (c.getCount() == 0) {
                return null;
            }
            int channelId = c.getInt(c.getColumnIndex("channel_id"));
            c.close();

            c = dataBaseAdapterManager.channelsDbAdapter.fetchItem(channelId);
            if (c.getCount() != 0) {
                hmObject = CursorToObjectHelper.convertCursorToChannel(detectUnrenamedChannel, c);
            }
            c.close();

        } else if (type == TYPE_VARIABLE) {
            Cursor c = dataBaseAdapterManager.varsDbAdapter.fetchItem(rowId);
            if (c.getCount() != 0) {
                hmObject = CursorToObjectHelper.convertCursorToVariable(c);
            }
            c.close();

        } else if (type == TYPE_SCRIPT) {
            Cursor c = dataBaseAdapterManager.programsDbAdapter.fetchItem(rowId);
            if (c.getCount() != 0) {
                hmObject = CursorToObjectHelper.convertCursorToProgram(c);
            }
            c.close();
        }
        return hmObject;
    }

    public static String getObjectName(Context ctx, int rowId, int type) {
        DataBaseAdapterManager dataBaseAdapterManager = HomeDroidApp.db();
        String name = "";

        if (type == TYPE_CHANNEL) {
            Cursor c = dataBaseAdapterManager.channelsDbAdapter.fetchItem(rowId);

            if (c.getCount() == 0) {
                return "";
            }

            name = c.getString(c.getColumnIndex("name"));
            c.close();
        } else if (type == TYPE_DATAPOINT) {
            Cursor c = dataBaseAdapterManager.datapointDbAdapter.fetchItem(rowId);

            if (c.getCount() == 0) {
                return "";
            }

            int channelId = c.getInt(c.getColumnIndex("channel_id"));
            c.close();

            c = dataBaseAdapterManager.channelsDbAdapter.fetchItem(channelId);

            if (c.getCount() == 0) {
                return "";
            }

            name = c.getString(c.getColumnIndex("name"));
            c.close();
        } else if (type == TYPE_VARIABLE) {
            Cursor c = dataBaseAdapterManager.varsDbAdapter.fetchItem(rowId);

            if (c.getCount() == 0) {
                return "";
            }

            name = c.getString(c.getColumnIndex("name"));
            c.close();
        } else if (type == TYPE_SCRIPT) {
            Cursor c = dataBaseAdapterManager.programsDbAdapter.fetchItem(rowId);

            if (c.getCount() == 0) {
                return "";
            }

            name = c.getString(c.getColumnIndex("name"));
            c.close();
        }

        return name;
    }

    public static GenericRawResults<String[]> getMostUsedForCurrentPrefix(Context ctx) throws SQLException {
        int prefix = PrefixHelper.getPrefix(ctx);
        int low = prefix * BaseDbAdapter.PREFIX_OFFSET;
        int high = (prefix + 1) * BaseDbAdapter.PREFIX_OFFSET;

        GenericRawResults<String[]> results = HomeDroidApp.db().getCommandDao().queryRaw(
                "SELECT " + HMCommand.COLUMN_ROWID + ", " + HMCommand.COLUMN_TYPE + ", max(" + HMCommand.COLUMN_TIMESTAMP + "), count(*)"
                        + " FROM " + HomeDroidApp.db().getCommandDao().getTableName()
                        + " WHERE " + HMCommand.COLUMN_ROWID + " BETWEEN " + low + " AND " + high
                        + " GROUP BY " + HMCommand.COLUMN_ROWID + ", " + HMCommand.COLUMN_TYPE
                        + " ORDER BY " + HMCommand.COLUMN_TIMESTAMP + " DESC");

        return results;

//        return DataBaseAdapterManager.db(ctx)
//                .getCommandDao()
//                .queryBuilder()
//                .groupBy(HMCommand.COLUMN_ROWID).groupBy(HMCommand.COLUMN_TYPE)
//                .orderBy(HMCommand.COLUMN_TIMESTAMP, false)
//                .where().between(HMCommand.COLUMN_ROWID, low, high)
//                .query();
    }

    public static List<HMCommand> getCommandsForCurrentPrefix(Context ctx) throws SQLException {

        int prefix = PrefixHelper.getPrefix(ctx);
        int low = prefix * BaseDbAdapter.PREFIX_OFFSET;
        int high = (prefix + 1) * BaseDbAdapter.PREFIX_OFFSET;

        return HomeDroidApp.db()
                .getCommandDao()
                .queryBuilder()
                .orderBy(HMCommand.COLUMN_TIMESTAMP, false)
                .where().between(HMCommand.COLUMN_ROWID, low, high)
                .query();

    }

    @Override
    public String toString() {
        return this.getRowId() + " / " + getValue();
    }

}
